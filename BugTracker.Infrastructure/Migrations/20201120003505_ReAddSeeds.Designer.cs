// <auto-generated />
using System;
using BugTracker.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BugTracker.Infrastructure.Migrations
{
    [DbContext(typeof(IdentityAppContext))]
    [Migration("20201120003505_ReAddSeeds")]
    partial class ReAddSeeds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("BugTracker.Core.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("BugTracker.Core.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23f3e0c1-cf77-4efb-8a7a-331e045dd39f",
                            Email = "user@email.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EMAIL.COM",
                            NormalizedUserName = "USER@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKCVxLH1ituMVleFkEEfocyXYmiDZUX7yKZwg7egSk+BnmIDXjZRuXnmmO5wLz+UFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76371424-8b9a-46bd-af5e-0de04d0475e3",
                            TwoFactorEnabled = false,
                            UserName = "user@email.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "679bb4dd-0317-4acd-9623-e8626a7025e6",
                            Email = "user2@email.com",
                            EmailConfirmed = false,
                            FirstName = "Billy",
                            LastName = "Bobson",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EMAIL.COM",
                            NormalizedUserName = "USER2@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAYf/is3xqsSkGARt+2Y59jsGVI4JVR++WFG3jVEKl8G1x1XAClihZrbReZ+68O63w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca90dd04-e770-431b-b4e0-d9394b481e89",
                            TwoFactorEnabled = false,
                            UserName = "user2@email.com"
                        });
                });

            modelBuilder.Entity("BugTracker.Core.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 11, 19, 19, 35, 4, 945, DateTimeKind.Local).AddTicks(9),
                            CreatedBy = "John Smith",
                            CreatorId = 1,
                            Description = "I'm troubleshooting this now",
                            TicketId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 11, 19, 19, 35, 4, 945, DateTimeKind.Local).AddTicks(986),
                            CreatedBy = "Billy Bobson",
                            CreatorId = 2,
                            Description = "Ok let me know what you find!",
                            TicketId = 1
                        });
                });

            modelBuilder.Entity("BugTracker.Core.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAcknowleged")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectOwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("BugTracker.Core.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("RepositoryUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 11, 19, 19, 35, 4, 944, DateTimeKind.Local).AddTicks(3051),
                            CreatedBy = "John Smith",
                            Description = "A web application for managing staffing",
                            Name = "Staffing App",
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 11, 19, 19, 35, 4, 944, DateTimeKind.Local).AddTicks(4663),
                            CreatedBy = "John Smith",
                            Description = "A web application for managing quality control",
                            Name = "Qc App",
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 11, 19, 19, 35, 4, 944, DateTimeKind.Local).AddTicks(4695),
                            CreatedBy = "John Smith",
                            Description = "An internal web app for measuring agent performance",
                            Name = "Scorecard App",
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 11, 19, 19, 35, 4, 944, DateTimeKind.Local).AddTicks(4699),
                            CreatedBy = "John Smith",
                            Description = "A web application for agents to monitor performance",
                            Name = "Scoreboard App",
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2020, 11, 19, 19, 35, 4, 944, DateTimeKind.Local).AddTicks(4703),
                            CreatedBy = "John Smith",
                            Description = "A web app for error tracking",
                            Name = "Error Tracker",
                            OwnerId = 1
                        });
                });

            modelBuilder.Entity("BugTracker.Core.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AssignedToId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("RequestorId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedToId = 1,
                            CreatedAt = new DateTime(2020, 11, 19, 19, 35, 4, 944, DateTimeKind.Local).AddTicks(6559),
                            CreatedBy = "John Smith",
                            Description = "I've attempted to update his team numerous times but to no avail. Can you take a look?",
                            Priority = 2,
                            ProjectId = 1,
                            RequestorId = 1,
                            Status = 0,
                            Title = "Joe Borski's team will not update",
                            Type = 2
                        },
                        new
                        {
                            Id = 2,
                            AssignedToId = 1,
                            CreatedAt = new DateTime(2020, 11, 19, 19, 35, 4, 944, DateTimeKind.Local).AddTicks(8462),
                            CreatedBy = "John Smith",
                            Description = "Can you check why she isn't loading for this month?",
                            Priority = 2,
                            ProjectId = 1,
                            RequestorId = 1,
                            Status = 0,
                            Title = "Susan Jones isn't showing up for this month",
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            AssignedToId = 1,
                            CreatedAt = new DateTime(2020, 11, 19, 19, 35, 4, 944, DateTimeKind.Local).AddTicks(8504),
                            CreatedBy = "John Smith",
                            Description = "We'd like to filter by employee last name. Is this something you guys can add to the app?",
                            Priority = 0,
                            ProjectId = 1,
                            RequestorId = 1,
                            Status = 2,
                            Title = "Filter by employee last name",
                            Type = 1
                        },
                        new
                        {
                            Id = 4,
                            AssignedToId = 2,
                            CreatedAt = new DateTime(2020, 11, 19, 19, 35, 4, 944, DateTimeKind.Local).AddTicks(8508),
                            CreatedBy = "John Smith",
                            Description = "Staffing is due by close of business and noone can access the app.",
                            Priority = 3,
                            ProjectId = 1,
                            RequestorId = 1,
                            Status = 1,
                            Title = "The app is down!",
                            Type = 2
                        },
                        new
                        {
                            Id = 5,
                            AssignedToId = 0,
                            CreatedAt = new DateTime(2020, 11, 19, 19, 35, 4, 944, DateTimeKind.Local).AddTicks(8512),
                            CreatedBy = "John Smith",
                            Description = "I can't load the staffing app.",
                            Priority = 3,
                            ProjectId = 1,
                            RequestorId = 1,
                            Status = 0,
                            Title = "Is this app working?",
                            Type = 2
                        },
                        new
                        {
                            Id = 6,
                            AssignedToId = 2,
                            CreatedAt = new DateTime(2020, 11, 19, 19, 35, 4, 944, DateTimeKind.Local).AddTicks(8517),
                            CreatedBy = "John Smith",
                            Description = "There are only 5 records to qc for today. Is this correct?",
                            Priority = 2,
                            ProjectId = 2,
                            RequestorId = 2,
                            Status = 1,
                            Title = "Only 5 records for today",
                            Type = 2
                        },
                        new
                        {
                            Id = 7,
                            AssignedToId = 0,
                            CreatedAt = new DateTime(2020, 11, 19, 19, 35, 4, 944, DateTimeKind.Local).AddTicks(8521),
                            CreatedBy = "John Smith",
                            Description = "We'll need to add a check to see if all the records are being pulled in from the call center.",
                            Priority = 1,
                            ProjectId = 2,
                            RequestorId = 2,
                            Status = 0,
                            Title = "Add a check for total records",
                            Type = 0
                        });
                });

            modelBuilder.Entity("BugTracker.Core.Models.UserProject", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserProjects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            AppUserId = 1
                        },
                        new
                        {
                            ProjectId = 2,
                            AppUserId = 1
                        },
                        new
                        {
                            ProjectId = 3,
                            AppUserId = 1
                        },
                        new
                        {
                            ProjectId = 4,
                            AppUserId = 1
                        },
                        new
                        {
                            ProjectId = 5,
                            AppUserId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BugTracker.Core.Models.Comment", b =>
                {
                    b.HasOne("BugTracker.Core.Models.Ticket", "Ticket")
                        .WithMany("Comments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("BugTracker.Core.Models.Notification", b =>
                {
                    b.HasOne("BugTracker.Core.Models.AppUser", "AppUser")
                        .WithMany("Notifications")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("BugTracker.Core.Models.Ticket", b =>
                {
                    b.HasOne("BugTracker.Core.Models.Project", "Project")
                        .WithMany("Tickets")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("BugTracker.Core.Models.UserProject", b =>
                {
                    b.HasOne("BugTracker.Core.Models.AppUser", "AppUser")
                        .WithMany("UserProjects")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Core.Models.Project", "Project")
                        .WithMany("UserProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("BugTracker.Core.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BugTracker.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BugTracker.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("BugTracker.Core.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BugTracker.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BugTracker.Core.Models.AppUser", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("UserProjects");
                });

            modelBuilder.Entity("BugTracker.Core.Models.Project", b =>
                {
                    b.Navigation("Tickets");

                    b.Navigation("UserProjects");
                });

            modelBuilder.Entity("BugTracker.Core.Models.Ticket", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
